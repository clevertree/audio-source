import React from "react";
import PropTypes from 'prop-types';

import './assets/Menu.css';
import '../button/assets/Button.css';
import MenuManager from "./MenuManager";

// absolute position menu
class MenuDropDown extends React.Component {

    constructor(props = {}) {
        super(props);
        // this.state = {
        //     open: props.open || false,
        // };
        this.onInputEventCallback = e => this.onInputEvent(e);
        this.closeDropDownCallback = e => this.closeDropDown(e);

    }

    componentDidMount() {
        MenuManager.addMenuCloseCallback(this.closeDropDownCallback);
    }
    componentWillUnmount() {
        MenuManager.removeMenuCloseCallback(this.closeDropDownCallback);
    }

    render() {
        let className = 'asui-menu-dropdown';
        if(this.props.className)
            className += ' ' + this.props.className;
        if(this.props.vertical)
            className += ' vertical';

        let mouseProps = {
            onMouseLeave: this.onInputEventCallback,
            onMouseEnter: this.onInputEventCallback
        };

        let children = this.props.options;
        if(typeof children === "function")
            children = children(this);

        // console.log('subMenuChildren', subMenuChildren);
        return <div className={className} children={children} {...mouseProps}/>;
    }

    // closeDropDown() {
    //     if(this.state.open !== false)
    //         this.setState({open: false});
    // }
    //
    // openDropDown() {
    //     if(this.state.open !== true)
    //         this.setState({open: true});
    //         // await this.dropdown.setContent(this.renderOptions(this.state.offset, this.state.maxLength));
    //     // this.closeAllMenusButThis();
    // }

    closeDropDown(e) {
        console.log('closeDropDown', e);
        this.props.onMenuClose(e);
    }

    onInputEvent(e) {
        console.log(e.type, this);

        switch (e.type) {
            case 'mouseenter':
            case 'mouseover':
                clearTimeout(this.mouseTimeout); // TODO: prevent closing on re-entry
            //     if(this.props.onMouseEnter)
            //         this.props.onMouseEnter(e);
                break;

            case 'mouseleave':
            case 'mouseout':
                clearTimeout(this.mouseTimeout);
                this.mouseTimeout = setTimeout(e => {
                    this.closeDropDown(e);
                }, 400);
                break;

            // case 'keydown':
            //
            //     let keyEvent = e.key;
            //     switch (keyEvent) {
            //         case 'Escape':
            //         case 'Backspace':
            //             this.closeDropDown(e);
            //             break;
            //
            //         // ctrlKey && metaKey skips a measure. shiftKey selects a range
            //         case 'ArrowRight':
            //             if(!this.props.vertical)
            //                 this.openDropDown();
            //             this.selectNextTabItem(e);
            //             break;
            //
            //         case 'ArrowLeft':
            //             if(!this.props.vertical)
            //                 this.closeDropDown(e);
            //             this.selectPreviousTabItem(e);
            //             break;
            //
            //         case 'ArrowDown':
            //             if(this.props.vertical)
            //                 this.openDropDown();
            //             this.selectNextTabItem(e);
            //             break;
            //
            //         case 'ArrowUp':
            //             if(this.props.vertical)
            //                 this.closeDropDown(e);
            //             this.selectPreviousTabItem(e);
            //             break;
            //
            //         default:
            //             console.log("Unknown key input: ", keyEvent);
            //             break;
            //
            //     }
            //     break;

            default:
                console.warn("Unknown input event: ", e.type);
                break;
        }
    }
}


/** Default props **/
MenuDropDown.defaultProps = {
    vertical:       false,
};

/** Validate props **/
MenuDropDown.propTypes = {
    vertical: PropTypes.bool,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onMenuClose: PropTypes.func.isRequired,
};




/** Export this script **/
export {
    MenuDropDown as default,
};
